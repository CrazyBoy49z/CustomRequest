{
    "docs": [
        {
            "location": "/", 
            "text": "CustomRequest\n\n\nUse pretty URLs everywhere in the MODX Revolution content management framework frontend. \n\n\nRequirements\n\n\n\n\nMODX Revolution 2.3+\n\n\nPHP v5.4+\n\n\n\n\nFeatures\n\n\nCustomRequest is an effective routing plugin for MODX Revolution to map pretty \nbut not found URLs to a MODX resource and set the request parameters by \nseparating the URI path at the URI separators or by a regular expression.\n\n\nNormally the first characters of the not found URI will be compared with the \nalias value of each config entry. If found, this config entry is used. The alias \npath is stripped from the not found URI and the remaining string is used to set \nthe  request parameters. As a second option, the alias value of a config entry \ncould contain a valid regular expression and the not found URI will be matched \nwith that expression. If matched, this config entry is used. The first \nsubpattern part of the expression is stripped from the found pattern and the \nremaining  string is used to identify the resource where the user is forwarded \nto later. At least the found pattern is removed from the not found URI and the \nremaining string is used to set the request parameters.\n\n\n\n\n\n\n  var _paq = _paq || [];\n  _paq.push(['trackPageView']);\n  _paq.push(['enableLinkTracking']);\n  (function() {\n    var u=\"//piwik.partout.info/\";\n    _paq.push(['setTrackerUrl', u+'piwik.php']);\n    _paq.push(['setSiteId', 16]);\n    var d=document, g=d.createElement('script'), s=d.getElementsByTagName('script')[0];\n    g.type='text/javascript'; g.async=true; g.defer=true; g.src=u+'piwik.js'; s.parentNode.insertBefore(g,s);\n  })();", 
            "title": "Home"
        }, 
        {
            "location": "/#customrequest", 
            "text": "Use pretty URLs everywhere in the MODX Revolution content management framework frontend.   Requirements   MODX Revolution 2.3+  PHP v5.4+   Features  CustomRequest is an effective routing plugin for MODX Revolution to map pretty \nbut not found URLs to a MODX resource and set the request parameters by \nseparating the URI path at the URI separators or by a regular expression.  Normally the first characters of the not found URI will be compared with the \nalias value of each config entry. If found, this config entry is used. The alias \npath is stripped from the not found URI and the remaining string is used to set \nthe  request parameters. As a second option, the alias value of a config entry \ncould contain a valid regular expression and the not found URI will be matched \nwith that expression. If matched, this config entry is used. The first \nsubpattern part of the expression is stripped from the found pattern and the \nremaining  string is used to identify the resource where the user is forwarded \nto later. At least the found pattern is removed from the not found URI and the \nremaining string is used to set the request parameters.   \n  var _paq = _paq || [];\n  _paq.push(['trackPageView']);\n  _paq.push(['enableLinkTracking']);\n  (function() {\n    var u=\"//piwik.partout.info/\";\n    _paq.push(['setTrackerUrl', u+'piwik.php']);\n    _paq.push(['setSiteId', 16]);\n    var d=document, g=d.createElement('script'), s=d.getElementsByTagName('script')[0];\n    g.type='text/javascript'; g.async=true; g.defer=true; g.src=u+'piwik.js'; s.parentNode.insertBefore(g,s);\n  })();", 
            "title": "CustomRequest"
        }, 
        {
            "location": "/installation/", 
            "text": "Install from MODX Extras\n\n\nSearch for CustomRequest in the Package Manager of a MODX installation and install it in there.\n\n\nManual installation\n\n\nIf you can't access the MODX Extras Repository in your MODX installation, you can manually install CustomRequest.\n\n\n\n\nDownload the transport package from \nMODX Extras\n\n  (or one of the pre built transport packages in \n_packages\n)\n\n\nUpload the zip file to your MODX installation's \ncore/packages\n folder.\n\n\nIn the MODX Manager, navigate to the Package Manager page, and select 'Search locally for packages' from the dropdown \n  button.\n\n\nCustomRequest should now show up in the list of available packages. Click the corresponding 'Install' button and follow \n  instructions to complete the installation.\n\n\n\n\nBuild it from source\n\n\nTo build and install the package from source you could use \nGit Package Management\n. \nThe GitHub repository of CustomRequest contains a \nconfig.json\n \nto build that package locally. Use this option, if you want to debug CustomRequest and/or contribute bugfixes and enhancements.\n\n\n\n\n\n\n  var _paq = _paq || [];\n  _paq.push(['trackPageView']);\n  _paq.push(['enableLinkTracking']);\n  (function() {\n    var u=\"//piwik.partout.info/\";\n    _paq.push(['setTrackerUrl', u+'piwik.php']);\n    _paq.push(['setSiteId', 16]);\n    var d=document, g=d.createElement('script'), s=d.getElementsByTagName('script')[0];\n    g.type='text/javascript'; g.async=true; g.defer=true; g.src=u+'piwik.js'; s.parentNode.insertBefore(g,s);\n  })();", 
            "title": "Installation"
        }, 
        {
            "location": "/installation/#install-from-modx-extras", 
            "text": "Search for CustomRequest in the Package Manager of a MODX installation and install it in there.", 
            "title": "Install from MODX Extras"
        }, 
        {
            "location": "/installation/#manual-installation", 
            "text": "If you can't access the MODX Extras Repository in your MODX installation, you can manually install CustomRequest.   Download the transport package from  MODX Extras \n  (or one of the pre built transport packages in  _packages )  Upload the zip file to your MODX installation's  core/packages  folder.  In the MODX Manager, navigate to the Package Manager page, and select 'Search locally for packages' from the dropdown \n  button.  CustomRequest should now show up in the list of available packages. Click the corresponding 'Install' button and follow \n  instructions to complete the installation.", 
            "title": "Manual installation"
        }, 
        {
            "location": "/installation/#build-it-from-source", 
            "text": "To build and install the package from source you could use  Git Package Management . \nThe GitHub repository of CustomRequest contains a  config.json  \nto build that package locally. Use this option, if you want to debug CustomRequest and/or contribute bugfixes and enhancements.   \n  var _paq = _paq || [];\n  _paq.push(['trackPageView']);\n  _paq.push(['enableLinkTracking']);\n  (function() {\n    var u=\"//piwik.partout.info/\";\n    _paq.push(['setTrackerUrl', u+'piwik.php']);\n    _paq.push(['setSiteId', 16]);\n    var d=document, g=d.createElement('script'), s=d.getElementsByTagName('script')[0];\n    g.type='text/javascript'; g.async=true; g.defer=true; g.src=u+'piwik.js'; s.parentNode.insertBefore(g,s);\n  })();", 
            "title": "Build it from source"
        }, 
        {
            "location": "/usage/", 
            "text": "Usage\n\n\nYou could configure CustomRequest in a custom manager page in the extras menu. \nThe CustomRequest configurations could be created on that page.\n\n\nThe configurations are executed in the order of the grid on this page. If there \nare two configurations starting with the same alias path, the first \nconfiguration is used. You can change the order of the configurations by \ndrag and drop.\n\n\nThe following settings could be set in each configuration:\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nName\n\n\nA name to identify this configuration.\n\n\n\n\n\n\nAlias Path\n\n\nNormally the first characters of a not found URI are compared with this string. If both paths are matching, this configuration is used. If the alias path field is not set, the alias path of the selected resource in this form is used \n(the generated value is shown with a green line then)\n. The alias path is stripped from the not found URI and the remaining string is used to set the request parameters.\nAs a second option, this field could contain a valid regular expression \n(the generated value is shown with a blue line then)\n. The regular expression has to contain \ndelimiters\n. The not found URI will be matched with that expression. If matched, this config entry is used. The first subpattern part of the expression is stripped from the found pattern and the remaining string is used to identify the resource where the user is forwarded to. At least the found pattern is removed from the not found URI and the remaining string is used to set the request parameters.\n\n\n\n\n\n\nResource\n\n\nA not found URI is forwarded to this resource, if the current configuration is used and if the alias path does not contain a regular expression.\n\n\n\n\n\n\nURI Parameter\n\n\nThe request/get/post parameter keys, the divided second part of the not found URI are assigned to. If the Regular Expression field not set, the second part is divided at the URI separators \n/\n\n\n\n\n\n\nRegular Expression\n\n\nThis optional regular expression is used to divide the second parts of the not found URI. The regular expression has to contain \ndelimiters\n. The search results are assigned to the request parameters in the order of occurrence.\n\n\n\n\n\n\n\n\nExample Configurations\n\n\nCalendar\n\n\nWith the \nDate\n configuration you could use an calendar snippet on the resource with the URI \ncalendar/date/\n. The snippet on that resource would use the request parameters \nyear\n, \nmonth\n, \nday\n, \ntitle\n to identify the event. An example URI triggering this configuration: \n/calendar/date/2015/09/01/eventname.html\n\n\nThe \nCalendar\n configuration sends the request parameters \nyear\n, \nmonth\n, \nday\n to another snippet on the resource with the URI \ncalendar/\n. Example triggering URI: \n/calendar/2015/09/01/\n \n1\n\n\n\n\n\n\n\n\nName\n\n\nAlias Path\n\n\nResource\n\n\nURI Parameter\n\n\nRegular Expression\n\n\n\n\n\n\n\n\n\n\nDate\n\n\ncalendar/date/\n\n\n\n\n[\"year\", \"month\", \"day\", \"title\"]\n\n\n\n\n\n\n\n\nCalendar\n\n\ncalendar/\n\n\n\n\n[\"year\", \"month\", \"day\"]\n\n\n\n\n\n\n\n\n\n\nGallery\n\n\nWith the \nGallery\n configuration you could use a calendar snippet on the selected resource \nGallery Folder\n. The Gallery snippet on that resource would use the request parameters \ngalAlbum\n, \ngalItem\n to identify the gallery and the image. An example URI triggering this configuration: \n/gallery/01/02/\n\n\n\n\n\n\n\n\nName\n\n\nAlias Path\n\n\nResource\n\n\nURI Parameter\n\n\nRegular Expression\n\n\n\n\n\n\n\n\n\n\nGallery\n\n\n\n\nGallery Folder\n\n\n[\"galAlbum\", \"galItem\"]\n\n\n\n\n\n\n\n\n\n\nDifferent URI\n\n\nWith the \nDifferent URI\n configuration you could call the resource \nTest\n with a complete different URI useing the request parameters \nparameter1\n, \nparameter2\n. \n2\n\n\n\n\n\n\n\n\nName\n\n\nAlias Path\n\n\nResource\n\n\nURI Parameter\n\n\nRegular Expression\n\n\n\n\n\n\n\n\n\n\nDifferent URI\n\n\ncomplete/different/uri/\n\n\nTest\n\n\n[\"parameter1\", \"parameter2\"]\n\n\n\n\n\n\n\n\n\n\nRegular Expression\n\n\nYou could even use Regular Expressions to set the request parameters \n3\n\n\n\n\n\n\n\n\nName\n\n\nAlias Path\n\n\nResource\n\n\nURI Parameter\n\n\nRegular Expression\n\n\n\n\n\n\n\n\n\n\nExpression\n\n\n\n\nExpression\n\n\n[\"string\", \"numeric\"]\n\n\n#(.*?)-(\\d+)#\n\n\n\n\n\n\n\n\nPagination\n\n\nThe Alias Path field could be filled with a valid regular expression to use \none pagination configuration for all pagination calls on the page. The first \nsubpattern part (\npage/\n) of the expression is stripped from the found pattern \nand the remaining string is used to identify the resource where the user is \nforwarded to later.\n\n\n\n\n\n\n\n\nName\n\n\nAlias Path\n\n\nResource\n\n\nURI Parameter\n\n\nRegular Expression\n\n\n\n\n\n\n\n\n\n\nPagination\n\n\n#.*?(page/)#\n\n\n\n\n[\"page\"]\n\n\n\n\n\n\n\n\n\n\nSystem Settings\n\n\nThe following parameter could be set in system settings\n\n\n\n\n\n\n\n\nParameter\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ndebug\n\n\nLog debug information in MODX error log\n\n\n\n\n\n\n\n\n\n\n\n\n  var _paq = _paq || [];\n  _paq.push(['trackPageView']);\n  _paq.push(['enableLinkTracking']);\n  (function() {\n    var u=\"//piwik.partout.info/\";\n    _paq.push(['setTrackerUrl', u+'piwik.php']);\n    _paq.push(['setSiteId', 16]);\n    var d=document, g=d.createElement('script'), s=d.getElementsByTagName('script')[0];\n    g.type='text/javascript'; g.async=true; g.defer=true; g.src=u+'piwik.js'; s.parentNode.insertBefore(g,s);\n  })();\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIf you are using two or more nested aliases in your configs, the deeper alias should be defined before the narrower alias in the configs.\n\n\n\n\n\n\nThe Alias Path does not have to match the alias of the Resource.\n\n\n\n\n\n\nThis rule does not make much sense. If you have a better one ...", 
            "title": "Usage"
        }, 
        {
            "location": "/usage/#usage", 
            "text": "You could configure CustomRequest in a custom manager page in the extras menu. \nThe CustomRequest configurations could be created on that page.  The configurations are executed in the order of the grid on this page. If there \nare two configurations starting with the same alias path, the first \nconfiguration is used. You can change the order of the configurations by \ndrag and drop.  The following settings could be set in each configuration:     Key  Description      Name  A name to identify this configuration.    Alias Path  Normally the first characters of a not found URI are compared with this string. If both paths are matching, this configuration is used. If the alias path field is not set, the alias path of the selected resource in this form is used  (the generated value is shown with a green line then) . The alias path is stripped from the not found URI and the remaining string is used to set the request parameters. As a second option, this field could contain a valid regular expression  (the generated value is shown with a blue line then) . The regular expression has to contain  delimiters . The not found URI will be matched with that expression. If matched, this config entry is used. The first subpattern part of the expression is stripped from the found pattern and the remaining string is used to identify the resource where the user is forwarded to. At least the found pattern is removed from the not found URI and the remaining string is used to set the request parameters.    Resource  A not found URI is forwarded to this resource, if the current configuration is used and if the alias path does not contain a regular expression.    URI Parameter  The request/get/post parameter keys, the divided second part of the not found URI are assigned to. If the Regular Expression field not set, the second part is divided at the URI separators  /    Regular Expression  This optional regular expression is used to divide the second parts of the not found URI. The regular expression has to contain  delimiters . The search results are assigned to the request parameters in the order of occurrence.", 
            "title": "Usage"
        }, 
        {
            "location": "/usage/#example-configurations", 
            "text": "Calendar  With the  Date  configuration you could use an calendar snippet on the resource with the URI  calendar/date/ . The snippet on that resource would use the request parameters  year ,  month ,  day ,  title  to identify the event. An example URI triggering this configuration:  /calendar/date/2015/09/01/eventname.html  The  Calendar  configuration sends the request parameters  year ,  month ,  day  to another snippet on the resource with the URI  calendar/ . Example triggering URI:  /calendar/2015/09/01/   1     Name  Alias Path  Resource  URI Parameter  Regular Expression      Date  calendar/date/   [\"year\", \"month\", \"day\", \"title\"]     Calendar  calendar/   [\"year\", \"month\", \"day\"]      Gallery  With the  Gallery  configuration you could use a calendar snippet on the selected resource  Gallery Folder . The Gallery snippet on that resource would use the request parameters  galAlbum ,  galItem  to identify the gallery and the image. An example URI triggering this configuration:  /gallery/01/02/     Name  Alias Path  Resource  URI Parameter  Regular Expression      Gallery   Gallery Folder  [\"galAlbum\", \"galItem\"]      Different URI  With the  Different URI  configuration you could call the resource  Test  with a complete different URI useing the request parameters  parameter1 ,  parameter2 .  2     Name  Alias Path  Resource  URI Parameter  Regular Expression      Different URI  complete/different/uri/  Test  [\"parameter1\", \"parameter2\"]      Regular Expression  You could even use Regular Expressions to set the request parameters  3     Name  Alias Path  Resource  URI Parameter  Regular Expression      Expression   Expression  [\"string\", \"numeric\"]  #(.*?)-(\\d+)#     Pagination  The Alias Path field could be filled with a valid regular expression to use \none pagination configuration for all pagination calls on the page. The first \nsubpattern part ( page/ ) of the expression is stripped from the found pattern \nand the remaining string is used to identify the resource where the user is \nforwarded to later.     Name  Alias Path  Resource  URI Parameter  Regular Expression      Pagination  #.*?(page/)#   [\"page\"]", 
            "title": "Example Configurations"
        }, 
        {
            "location": "/usage/#system-settings", 
            "text": "The following parameter could be set in system settings     Parameter  Description      debug  Log debug information in MODX error log      \n  var _paq = _paq || [];\n  _paq.push(['trackPageView']);\n  _paq.push(['enableLinkTracking']);\n  (function() {\n    var u=\"//piwik.partout.info/\";\n    _paq.push(['setTrackerUrl', u+'piwik.php']);\n    _paq.push(['setSiteId', 16]);\n    var d=document, g=d.createElement('script'), s=d.getElementsByTagName('script')[0];\n    g.type='text/javascript'; g.async=true; g.defer=true; g.src=u+'piwik.js'; s.parentNode.insertBefore(g,s);\n  })();        If you are using two or more nested aliases in your configs, the deeper alias should be defined before the narrower alias in the configs.    The Alias Path does not have to match the alias of the Resource.    This rule does not make much sense. If you have a better one ...", 
            "title": "System Settings"
        }, 
        {
            "location": "/contributors/", 
            "text": "Contributors\n\n\nThe CustomRequest project was started in 2013 by \nThomas Jakobi\n.\n\n\nMany thanks to everyone who has contributed to this project:\n\n\n\n\n@benjamindean\n\n\n@Boddlnagg\n\n\n\n\n\n\n\n\n  var _paq = _paq || [];\n  _paq.push(['trackPageView']);\n  _paq.push(['enableLinkTracking']);\n  (function() {\n    var u=\"//piwik.partout.info/\";\n    _paq.push(['setTrackerUrl', u+'piwik.php']);\n    _paq.push(['setSiteId', 16]);\n    var d=document, g=d.createElement('script'), s=d.getElementsByTagName('script')[0];\n    g.type='text/javascript'; g.async=true; g.defer=true; g.src=u+'piwik.js'; s.parentNode.insertBefore(g,s);\n  })();", 
            "title": "Contributors"
        }, 
        {
            "location": "/contributors/#contributors", 
            "text": "The CustomRequest project was started in 2013 by  Thomas Jakobi .  Many thanks to everyone who has contributed to this project:   @benjamindean  @Boddlnagg    \n  var _paq = _paq || [];\n  _paq.push(['trackPageView']);\n  _paq.push(['enableLinkTracking']);\n  (function() {\n    var u=\"//piwik.partout.info/\";\n    _paq.push(['setTrackerUrl', u+'piwik.php']);\n    _paq.push(['setSiteId', 16]);\n    var d=document, g=d.createElement('script'), s=d.getElementsByTagName('script')[0];\n    g.type='text/javascript'; g.async=true; g.defer=true; g.src=u+'piwik.js'; s.parentNode.insertBefore(g,s);\n  })();", 
            "title": "Contributors"
        }
    ]
}